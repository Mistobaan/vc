{"id":"vc-1","title":"Activity Feed and Event Streaming","description":"Implement comprehensive event journaling and real-time activity feed for observability. Without this, debugging AI agents is nearly impossible. Must-have before dogfooding.","design":"Event-based system that logs all executor actions, AI assessments, issue state changes, and agent interactions. Provides 'vc executor tail' command for real-time monitoring.","acceptance_criteria":"- Event journal table in database\n- Activity feed CLI command working\n- Real-time tail functionality\n- Integration with issue processor\n- Events logged for: issue claims, AI assessments, executions, quality gates, issue closures","status":"open","priority":0,"issue_type":"epic","created_at":"2025-10-13T21:05:19.448795-07:00","updated_at":"2025-10-13T23:11:45.910895-07:00","dependencies":[{"issue_id":"vc-1","depends_on_id":"vc-9","type":"blocks","created_at":"2025-10-13T21:05:19.449797-07:00","created_by":"import"}]}
{"id":"vc-10","title":"Verify existing Beads fields and add discovered-from dependency type","description":"Quick verification that design, acceptance_criteria, and notes fields work correctly. Add the 'discovered-from' dependency type constant to support tracking work discovered during execution.","design":"1. Write test to verify design/acceptance_criteria/notes fields can be set and retrieved. 2. Add DepDiscoveredFrom constant to internal/types/types.go. 3. Update DependencyType.IsValid() to include new type. 4. Test creating dependencies with discovered-from type.","acceptance_criteria":"- Test confirms design, acceptance_criteria, notes fields work correctly\\n- DepDiscoveredFrom constant added to types\\n- IsValid() function updated\\n- Can create and query dependencies with type 'discovered-from'\\n- Documentation updated","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-13T21:21:48.323451-07:00","updated_at":"2025-10-13T23:14:01.180328-07:00","closed_at":"2025-10-13T23:14:01.180328-07:00"}
{"id":"vc-11","title":"Design and implement executor_instances table","description":"Create the executor_instances table to track which executor instances are running. This enables multi-executor coordination and stale instance cleanup.","design":"Schema: instance_id (TEXT PK), hostname (TEXT), pid (INTEGER), status (running/stopped), started_at (DATETIME), last_heartbeat (DATETIME), version (TEXT), metadata (JSON). Add to Storage interface: RegisterInstance(), UpdateHeartbeat(), GetActiveInstances(), CleanupStaleInstances(). Implement in SQLite backend. Add indexes on status and last_heartbeat.","acceptance_criteria":"- executor_instances table created in schema.go\\n- Storage interface methods added\\n- SQLite implementation complete\\n- Registration and heartbeat functions work\\n- Stale instance cleanup logic implemented\\n- Schema documented with comments\\n- Basic unit tests pass","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-13T21:22:26.6102-07:00","updated_at":"2025-10-13T23:20:23.133979-07:00","closed_at":"2025-10-13T23:20:23.133979-07:00","dependencies":[{"issue_id":"vc-11","depends_on_id":"vc-10","type":"blocks","created_at":"2025-10-13T21:22:53.549651-07:00","created_by":"stevey"}]}
{"id":"vc-12","title":"Design and implement issue_execution_state table","description":"Create the issue_execution_state table for checkpoint/resume support. This enables executors to save progress and resume after interruption.","design":"Schema: issue_id (TEXT FK), executor_instance_id (TEXT FK), state (claimed/assessing/executing/analyzing/gates/completed), checkpoint_data (JSON), started_at (DATETIME), updated_at (DATETIME). Add atomic ClaimIssue() that inserts execution_state row and updates issue status. Add SaveCheckpoint(), GetCheckpoint(), ResumeFromCheckpoint(). State machine: claimed → assessing → executing → analyzing → gates → completed.","acceptance_criteria":"- issue_execution_state table created in schema.go\\n- Atomic ClaimIssue() prevents double-claiming\\n- SaveCheckpoint()/GetCheckpoint() work with JSON data\\n- State transitions enforced\\n- Foreign keys to issues and executor_instances\\n- Schema documented\\n- Unit tests for claim and checkpoint operations","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-13T21:22:27.670681-07:00","updated_at":"2025-10-13T23:11:45.912271-07:00","dependencies":[{"issue_id":"vc-12","depends_on_id":"vc-11","type":"blocks","created_at":"2025-10-13T21:22:53.554608-07:00","created_by":"stevey"}]}
{"id":"vc-13","title":"Implement PostgreSQL backend","description":"Implement PostgreSQL storage backend. Port all schemas (issues, dependencies, executor tables) to PostgreSQL DDL and implement the Storage interface for postgres.","design":"Create internal/storage/postgres/ package mirroring sqlite structure. Port schema DDL to PostgreSQL (use JSONB for metadata/checkpoints). Implement all Storage interface methods. Add connection pooling with pgx. Create factory function in storage package to return correct backend based on config. Test switching between backends.","acceptance_criteria":"- postgres package created with full Storage implementation\\n- All schemas ported to PostgreSQL DDL\\n- Connection pooling configured\\n- Backend factory function works\\n- Can switch between SQLite and PostgreSQL via config\\n- All basic operations work on PostgreSQL\\n- Connection lifecycle handled correctly","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-13T21:22:29.436751-07:00","updated_at":"2025-10-13T23:11:45.912365-07:00","dependencies":[{"issue_id":"vc-13","depends_on_id":"vc-12","type":"blocks","created_at":"2025-10-13T21:22:53.559463-07:00","created_by":"stevey"}]}
{"id":"vc-14","title":"Create migration and initialization scripts","description":"Create scripts/functions to initialize fresh databases and handle schema migrations for both SQLite and PostgreSQL.","design":"Add InitDatabase() function that creates all tables with current schema. Create internal/storage/migrations package. Design simple migration system: version table, sequential numbered migrations, up/down support. Create scripts/init-db.sh for CLI usage. Document bootstrap process in CLAUDE.md. Consider using golang-migrate or similar for production migrations.","acceptance_criteria":"- InitDatabase() creates all tables for both backends\\n- Migration framework designed and documented\\n- scripts/init-db.sh can bootstrap fresh database\\n- Version tracking table exists\\n- At least one test migration created and works\\n- Bootstrap process documented\\n- Works for both SQLite and PostgreSQL","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-13T21:22:30.615509-07:00","updated_at":"2025-10-13T23:11:45.912462-07:00","dependencies":[{"issue_id":"vc-14","depends_on_id":"vc-13","type":"blocks","created_at":"2025-10-13T21:22:53.563882-07:00","created_by":"stevey"}]}
{"id":"vc-15","title":"Integration tests for executor functionality","description":"Write integration tests validating the full executor table functionality, including multi-executor scenarios, claim/checkpoint/resume flows, and both database backends.","design":"Create internal/storage/integration_test.go. Test scenarios: 1) Multiple executors claiming different issues (no conflicts), 2) Claim race condition handling, 3) Checkpoint save and restore, 4) Stale instance cleanup, 5) Resume after interruption, 6) All above on both SQLite and PostgreSQL. Use table-driven tests to run same scenarios on both backends.","acceptance_criteria":"- Integration test file created\\n- Multi-executor claim scenarios pass\\n- Race condition tests pass (no double-claiming)\\n- Checkpoint/resume cycle works\\n- Stale instance cleanup verified\\n- All tests pass on SQLite\\n- All tests pass on PostgreSQL\\n- Test coverage documented","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-13T21:22:31.886325-07:00","updated_at":"2025-10-13T23:11:45.912552-07:00","dependencies":[{"issue_id":"vc-15","depends_on_id":"vc-14","type":"blocks","created_at":"2025-10-13T21:22:53.568457-07:00","created_by":"stevey"}]}
{"id":"vc-2","title":"Recursive Refinement and Follow-On Missions","description":"The core of 'Engineer-in-a-Box'. AI analyzes execution results and automatically creates follow-on issues for discovered work, punted items, and quality problems. This is what makes vc self-improving instead of just a task executor.","design":"After each issue execution, AI analyzes the result and extracts: 1) Punted work (deferred items), 2) Discovered bugs/issues, 3) Quality problems. Automatically creates child issues with 'discovered-from' dependencies. Executor processes these recursively until all work is complete.","acceptance_criteria":"- analyzeExecutionResult AI activity implemented\n- Automatic issue creation from AI analysis\n- discovered-from dependency type support\n- Punted items labeled and tracked\n- Quality issues create blocking dependencies\n- Recursive processing until convergence\n- Integration with quality gates","status":"open","priority":0,"issue_type":"epic","created_at":"2025-10-13T21:05:19.449075-07:00","updated_at":"2025-10-13T23:11:45.912647-07:00","dependencies":[{"issue_id":"vc-2","depends_on_id":"vc-1","type":"blocks","created_at":"2025-10-13T21:05:19.449939-07:00","created_by":"import"}]}
{"id":"vc-3","title":"Watchdog and Convergence Detection","description":"Prevents infinite loops, stuck issues, and low-confidence spirals. Monitors executor progress and escalates when tasks aren't making forward progress. Should-have for production reliability.","design":"Monitor executor iterations and detect: 1) Max iterations without issue completion, 2) Repeated low-confidence AI assessments, 3) No progress within time threshold, 4) Escalation count exceeding limit. When detected, escalate to human or abort gracefully.","acceptance_criteria":"- Watchdog monitor component\n- maxIterationsWithoutProgress tracking\n- maxLowConfidenceAssessments tracking\n- minProgressCheckInterval enforcement\n- Escalation thresholds\n- Graceful abort on convergence failure\n- Logging and metrics integration","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-13T21:05:19.449174-07:00","updated_at":"2025-10-13T23:11:45.912744-07:00","dependencies":[{"issue_id":"vc-3","depends_on_id":"vc-2","type":"blocks","created_at":"2025-10-13T21:05:19.450051-07:00","created_by":"import"}]}
{"id":"vc-4","title":"Git Operations Integration","description":"Complete the loop from code changes to mergeable PR. Enables branch creation, commits with proper messages, and PR preparation. Should-have for true 'Engineer-in-a-Box' functionality.","design":"After quality gates pass, automatically: 1) Create feature branch (if not exists), 2) Stage and commit changes with descriptive message, 3) Push to remote, 4) Optionally create PR or prepare for human review. Integrate with issue closer to link commits to issues.","acceptance_criteria":"- Git branch creation/detection\n- Automatic staging of changes\n- Commit message generation (linked to issues)\n- Push to remote support\n- PR creation (via gh CLI or manual prep)\n- Integration with issue workflow\n- Rollback/cleanup on failures","status":"open","priority":1,"issue_type":"epic","created_at":"2025-10-13T21:05:19.449252-07:00","updated_at":"2025-10-13T23:11:45.912829-07:00","dependencies":[{"issue_id":"vc-4","depends_on_id":"vc-2","type":"blocks","created_at":"2025-10-13T21:05:19.450149-07:00","created_by":"import"}]}
{"id":"vc-5","title":"Beads Integration and Executor Tables","description":"Foundation work: Extend Beads with VC-specific fields and executor tables. This is the base layer that all other phases depend on.","design":"Add: 1) discovered-from dependency type (already in Beads), 2) design/acceptance_criteria/notes fields (already in Beads), 3) executor_instances table for tracking worker instances, 4) issue_execution_state table for checkpointing/resumption, 5) Ensure PostgreSQL backend works alongside SQLite","acceptance_criteria":"- discovered-from dependency type verified working\n- design, acceptance_criteria, notes fields verified working\n- executor_instances table created and schema documented\n- issue_execution_state table created with checkpoint support\n- PostgreSQL backend tested (while keeping SQLite as default)\n- Migration/initialization scripts created\n- All beads tests passing with new tables","status":"open","priority":0,"issue_type":"epic","created_at":"2025-10-13T21:05:19.449345-07:00","updated_at":"2025-10-13T23:11:45.912921-07:00","dependencies":[{"issue_id":"vc-5","depends_on_id":"vc-10","type":"parent-child","created_at":"2025-10-13T21:22:52.23331-07:00","created_by":"stevey"},{"issue_id":"vc-5","depends_on_id":"vc-11","type":"parent-child","created_at":"2025-10-13T21:22:52.237887-07:00","created_by":"stevey"},{"issue_id":"vc-5","depends_on_id":"vc-12","type":"parent-child","created_at":"2025-10-13T21:22:52.242491-07:00","created_by":"stevey"},{"issue_id":"vc-5","depends_on_id":"vc-13","type":"parent-child","created_at":"2025-10-13T21:22:52.247016-07:00","created_by":"stevey"},{"issue_id":"vc-5","depends_on_id":"vc-14","type":"parent-child","created_at":"2025-10-13T21:22:52.251938-07:00","created_by":"stevey"},{"issue_id":"vc-5","depends_on_id":"vc-15","type":"parent-child","created_at":"2025-10-13T21:22:52.256877-07:00","created_by":"stevey"}]}
{"id":"vc-6","title":"Issue Processor Event Loop","description":"Build the event loop that claims and executes issues via coding agents. No AI supervision yet - just mechanical claiming, spawning agents, and updating status. The core execution engine.","design":"Port IssueWorkflowExecutor pattern: 1) Atomic claiming with PostgreSQL FOR UPDATE SKIP LOCKED, 2) Spawn Cody/Claude Code with -stream-json, 3) Parse agent output and update issue status, 4) Handle epic completion detection, 5) Support pause/resume/abort. Pure orchestration layer with no AI decision-making yet.","acceptance_criteria":"- Event loop running continuously\n- Atomic issue claiming from ready work queue\n- Cody/Claude Code spawning and lifecycle management\n- Agent output parsing and status updates\n- Epic completion detection (all children closed)\n- Pause/resume/abort commands working\n- Basic error handling and retries\n- 'vc execute' command working end-to-end","status":"open","priority":0,"issue_type":"epic","created_at":"2025-10-13T21:05:19.449438-07:00","updated_at":"2025-10-13T23:11:45.913001-07:00","dependencies":[{"issue_id":"vc-6","depends_on_id":"vc-5","type":"blocks","created_at":"2025-10-13T21:05:19.450237-07:00","created_by":"import"}]}
{"id":"vc-7","title":"AI Supervision (Assess and Analyze)","description":"Add AI assessment before execution and AI analysis after execution. This is what makes vc intelligent - AI reviews every task and extracts hidden work. The 'secret sauce' that prevents agents from going off the rails.","design":"Integrate Anthropic Go SDK (Sonnet 4.5): 1) assessIssueState before execution (strategy, steps, risks, confidence), 2) analyzeExecutionResult after execution (completion status, punted items, discovered work, quality issues), 3) Auto-create discovered issues from AI analysis, 4) Log AI confidence and reasoning for debugging. Two AI calls per issue execution.","acceptance_criteria":"- Anthropic Go SDK integrated\n- assessIssueState activity implemented\n- analyzeExecutionResult activity implemented\n- AI confidence scores logged\n- AI reasoning/strategy logged to events\n- Auto-creation of discovered issues working\n- Integration with issue processor (Phase 2)\n- AI costs tracked and logged\n- Fallback handling for AI failures","status":"open","priority":0,"issue_type":"epic","created_at":"2025-10-13T21:05:19.449508-07:00","updated_at":"2025-10-13T23:11:45.91309-07:00","dependencies":[{"issue_id":"vc-7","depends_on_id":"vc-6","type":"blocks","created_at":"2025-10-13T21:05:19.450326-07:00","created_by":"import"}]}
{"id":"vc-8","title":"Quality Gates Enforcement","description":"Enforce quality standards before closing issues. All four gates must pass: go test, golangci-lint, go build. On failure, create blocking issues. Prevents broken code from being marked complete.","design":"After issue execution completes, run quality gate sequence: 1) go test (all tests must pass), 2) golangci-lint (zero lint errors), 3) go build (clean build). On any gate failure, create blocking issue with gate type label, mark original issue as blocked. Quality gates are mechanical - no AI decision making.","acceptance_criteria":"- go test gate implemented\n- golangci-lint gate implemented  \n- go build gate implemented\n- Blocking issue creation on failures\n- Gate failure details captured in blocking issues\n- Original issue status updated to blocked\n- Gate pass/fail logged to events\n- Integration with issue processor\n- Gate results visible in issue show command","status":"open","priority":0,"issue_type":"epic","created_at":"2025-10-13T21:05:19.449594-07:00","updated_at":"2025-10-13T23:11:45.913182-07:00","dependencies":[{"issue_id":"vc-8","depends_on_id":"vc-7","type":"blocks","created_at":"2025-10-13T21:05:19.450421-07:00","created_by":"import"}]}
{"id":"vc-9","title":"REPL Shell and Natural Language Interface","description":"Interactive shell for directing VC. Natural language interface that translates user requests into issues. The 'VibeCoder Primitive': user says 'let's continue' and system resumes from tracker state.","design":"Simple vc command with chat interface: 1) Accept natural language input from user, 2) Use AI to translate requests into issues (create epic, break into children), 3) Show activity feed of agent work, 4) 'let's continue' command resumes from current tracker state (finds ready work). The human\u003c-\u003eAI interaction layer.","acceptance_criteria":"- vc repl command starts interactive shell\n- Natural language input accepted\n- AI translation of requests to issues working\n- Issue/epic creation from natural language\n- Activity feed display in REPL\n- 'let's continue' command implemented\n- Tracker state visibility (what's ready, what's blocked)\n- Exit/quit commands\n- Command history\n- Integration with issue processor and AI supervision","status":"open","priority":0,"issue_type":"epic","created_at":"2025-10-13T21:05:19.449673-07:00","updated_at":"2025-10-13T23:11:45.913274-07:00","dependencies":[{"issue_id":"vc-9","depends_on_id":"vc-8","type":"blocks","created_at":"2025-10-13T21:05:19.450524-07:00","created_by":"import"}]}
